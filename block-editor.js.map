{"version":3,"file":"block-editor.js","sourceRoot":"","sources":["src/block-editor.ts"],"names":[],"mappings":"AAAA;;;;GAIG;;;;;;;AAEH,OAAO,EAAC,UAAU,EAAE,IAAI,EAAE,GAAG,EAAC,MAAM,KAAK,CAAC;AAC1C,OAAO,EAAC,aAAa,EAAE,QAAQ,EAAE,KAAK,EAAC,MAAM,mBAAmB,CAAC;AACjE,OAAO,MAAM,CAAC;AACd,OAAO,yBAAyB,CAAC;AACjC;;;;;;GAMG;AAEI,IAAM,WAAW,GAAjB,MAAM,WAAY,SAAQ,UAAU;IAApC;;QAeL,YAAO,GAAG,KAAK,CAAC;QAGhB,UAAK,GAAG,KAAK,CAAC;QAGd,SAAI,GAAG,EAAE,CAAC;QAGV,QAAG,GAAG,EAAE,CAAC;QAoBT,kBAAa,GAAG,CAAC,OAAe,EAAE,EAAE;YAClC,IAAI,IAAI,CAAC,OAAO,EAAE,CAAC;gBACjB,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,QAAQ,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,CAAC;gBACnE,MAAM,IAAI,GAAG,OAAO,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC;gBAC7D,MAAM,SAAS,GAAG,WAAW,IAAI,CAAC,GAAG,EAAE,CAAC;gBACxC,MAAM,aAAa,GAAG,IAAI;qBACvB,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,MAAM,KAAK,CAAC,CAAC;qBAC3B,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;qBACzD,IAAI,CAAC,SAAS,GAAG,MAAM,CAAC,CAAC;gBAC5B,IAAI,CAAC,IAAI,GAAG,aAAa,GAAG,SAAS,CAAC;YACxC,CAAC;iBACI,CAAC;gBACJ,IAAI,CAAC,IAAI,GAAG,MAAM,CAAC,OAAO,CAAC,CAAA;YAC7B,CAAC;QACH,CAAC,CAAA;IACH,CAAC;IAlCU,MAAM;QACb,OAAO,IAAI,CAAA;;0BAEW,CAAC,CAAS,EAAE,EAAE,GAAE,IAAI,CAAC,OAAO,GAAG,CAAC,CAAC,MAAM,CAAC,OAAO,CAAA,CAAA,CAAC;;;;MAIpE,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAA;0EACgD,CAAC,CAAS,EAAE,EAAE,GAAE,IAAI,CAAC,GAAG,GAAG,CAAC,CAAC,MAAM,CAAC,KAAK,CAAA,CAAA,CAAC;KAC/G,CAAC,CAAC,CAAC,IAAI,CAAA,EAAE;;;;mDAIqC,CAAC,CAAS,EAAE,EAAE,GAAE,IAAI,CAAC,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA,CAAA,CAAC;;;KAG7I,CAAC;IACJ,CAAC;;AAzCe,kBAAM,GAAG,GAAG,CAAA;;;;;;;;;;;;GAY3B,AAZqB,CAYpB;AAEF;IADC,KAAK,EAAE;4CACQ;AAGhB;IADC,QAAQ,CAAC,EAAC,IAAI,EAAE,MAAM,EAAC,CAAC;0CACX;AAGd;IADC,QAAQ,CAAC,EAAC,IAAI,EAAE,MAAM,EAAC,CAAC;yCACf;AAGV;IADC,KAAK,EAAE;wCACC;AAxBE,WAAW;IADvB,aAAa,CAAC,cAAc,CAAC;GACjB,WAAW,CA2DvB","sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {LitElement, html, css} from 'lit';\nimport {customElement, property, state} from 'lit/decorators.js';\nimport 'mdui';\nimport 'mdui/components/icon.js';\n/**\n * An example element.\n *\n * @fires coun-changed - Indicates when the count changes\n * @slot - This element has a slot\n * @csspart button - The button\n */\n@customElement('block-editor')\nexport class BlockEditor extends LitElement {\n  static override styles = css`\n    // from https://stackoverflow.com/questions/6490252/vertically-centering-a-div-inside-another-div\n    .parent {\n      width: 600px;\n    }\n\n    .parent mdui-switch {\n      transform: translateY(50%);\n    }\n    .parent mdui-text-field {\n      width: 100px;\n    }\n  `;\n  @state()\n  checked = false;\n\n  @property({type: String})\n  order = \"201\";\n\n  @property({type: String})\n  text = \"\";\n\n  @state()\n  tag = \"\";\n  override render() {\n    return html`\n  <div class=\"parent\">\n    <mdui-switch @input=${(e: Object) => {this.checked = e.target.checked}}>\n      <mdui-icon slot=\"unchecked-icon\" name=\"code\"></mdui-icon>\n      <mdui-icon slot=\"checked-icon\" name=\"quiz\"></mdui-icon>\n    </mdui-switch>\n    ${!this.checked ? html`\n      <mdui-text-field label=\"Tag\" style=\"justify-self: right;\" @change=${(e: Object) => {this.tag = e.target.value}}></mdui-text-field>\n    ` : html``}\n\n    <br>\n\n    <textarea id=\"e0\" class=\"code-editor\" @input=${(e: Object) => {this.text = String(this.figureOutText(e.target.value)); console.log(this.text)}}>\n    </textarea>\n  </div>\n    `;\n  }\n\n  figureOutText = (newText: String) => {\n    if (this.checked) {\n      const order = this.order.split('').map(char => parseInt(char, 10));\n      const data = newText.split('\\n\\n\\n').map(i => i.split('\\n'));\n      const separator = `\\ntags: ${this.tag}`;\n      const formattedData = data\n        .filter(i => i.length === 3)\n        .map(i => `${i[order[0]]}\\n${i[order[1]]} ${i[order[2]]}`)\n        .join(separator + '\\n\\n');\n      this.text = formattedData + separator;\n    }\n    else {\n      this.text = String(newText)\n    }\n  }\n}\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'block-editor': BlockEditor;\n  }\n}\n\n"]}