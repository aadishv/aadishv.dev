---
import type { MarkdownInstance, GetStaticPathsOptions } from "astro";
import Layout from "@/layouts/Layout.astro";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader } from "@/components/ui/card";
import { parseISO, format } from "date-fns";

// Define the expected shape of the frontmatter
interface PostFrontmatter {
  title: string;
  date: string; // Assuming date is a string compatible with parseISO
  hidden?: boolean;
  image?: string; // Optional image field for project posts
  description?: string; // Optional description field for project posts
  link?: string; // Optional link field for project posts
  categories?: string[]; // Added categories for type safety
}

// Type for a markdown post instance from Astro.glob
type MarkdownPost = MarkdownInstance<PostFrontmatter>;

// Type for the parameters object returned by getStaticPaths
type PostParams = { slug: string };

// Type for the props object returned by getStaticPaths
type PostProps = { post: MarkdownPost };

// Type for the return value of getStaticPaths for this specific case
type PostGetStaticPathsResult = Array<{ params: PostParams; props: PostProps }>;

export async function getStaticPaths({}: GetStaticPathsOptions): Promise<PostGetStaticPathsResult> {
  // allContent is an array of MarkdownPost instances
  let allContent: MarkdownPost[] = await Astro.glob("@/content/posts/*.md");
  if (import.meta.env.DEV) {
    const personal: MarkdownPost[] = await Astro.glob("@/content/personal/*.md");
    allContent = allContent.concat(personal);
  }

  const paths: PostGetStaticPathsResult = allContent.map((post) => {
    // post.file is guaranteed to be a string by Astro.glob
    const slug = getSlugFromPath(post.file);
    return {
      params: {
        slug: slug, // slug is string
      },
      props: { post }, // post is MarkdownPost
    };
  });

  return paths;
}

export const getSlugFromPath = (path: string): string => {
  // path.split("/").at(-1) returns string | undefined.
  // For valid file paths from Astro.glob, at(-1) will be a string.
  // Use non-null assertion (!) based on the expected input from glob.
  // A more robust solution would be error handling or fallback like `.at(-1) ?? 'default-slug'`.
  // Using ! satisfies the type system assuming valid paths.
  return path.split("/").at(-1)!.replace(".md", "");
};

// Define the type for the component's props expected from getStaticPaths
interface Props {
  post: MarkdownPost;
}

// Cast Astro.props to the defined Props interface for type safety
const { post } = Astro.props as Props;

const headings = post.getHeadings();

// Blog post header functionality
// post.frontmatter.date is typed as string by PostFrontmatter
const date: Date = parseISO(post.frontmatter.date); // parseISO returns Date
const formatted: string = post.frontmatter.date == "<top>" ? "" : format(date, "LLLL d, yyyy"); // format returns string

const isProject =
  post.frontmatter.categories &&
  post.frontmatter.categories.includes("project");
---

<Layout title={post.frontmatter.title}>
  <article class="container mx-auto py-10 lg:px-52">
    {
      post.frontmatter.image && (
        <div>
          <img
            src={post.frontmatter.image}
            alt={post.frontmatter.title}
            class="w-full h-auto max-h-[400px] object-contain mx-auto"
          />
        </div>
      )
    }
    <main>
      <div class="text-xl">
        {
          post.frontmatter.link ? (
            <a
              href={post.frontmatter.link}
              target="_blank"
              rel="noopener noreferrer"
            >
              <h1>{post.frontmatter.title}</h1>
            </a>
          ) : (
            <a href={`/${getSlugFromPath(post.file)}`}>
              {" "}
              {/* Point to the page itself if no external link */}
              <h1>{post.frontmatter.title}</h1>
            </a>
          )
        }
        <h4>
          <time datetime={date.toString()}>{formatted}</time>
        </h4>
      </div>

      {
        isProject && post.frontmatter.link && (
          <div class="my-4">
            <a
              href={post.frontmatter.link}
              target="_blank"
              rel="noopener noreferrer"
            >
              <Button variant="outline">View Live Project / Tool</Button>
            </a>
          </div>
        )
      }

      {
        headings.length != 0 && (
          <div class="mt-3">
            <Card>
              <div class="-m-3 flex flex-col">
                <CardHeader>
                  <h6 class="-mb-5 -mt-1">Contents</h6>
                </CardHeader>
                <CardContent>
                  {headings.map((heading) => (
                    <div style={`margin-left: ${2 * heading.depth - 1}rem`}>
                      <a href={`#${heading.slug}`} class="text-sm">
                        {heading.text}
                      </a>
                    </div>
                  ))}
                </CardContent>
              </div>
            </Card>
          </div>
        )
      }

      <post.Content />
    </main>
  </article>
</Layout>
